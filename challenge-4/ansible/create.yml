---
- name: Provision an OpenStack VM by calling Terraform from Ansible
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    # Run the equivalent of the 'terraform init && terraform plan' command.
    # Use and specify variables originating from vars.yml (also be careful keep them out of any logs).
    - name: Test creation of an execution plan for Terraform
      cloud.terraform.terraform:
        project_path: "{{ tf_project_path }}"
        force_init: true
        state: present
        variables: &tf_variables
          vm_name: "{{ vm_name }}"
          vm_image_name: "{{ vm_image_name }}"
          vm_flavor_name: "{{ vm_flavor_name }}"
          vm_key_pair: "{{ vm_key_pair }}"
          vm_security_group: "{{ vm_security_group }}"
          vm_network: "{{ vm_network }}"
          vm_ssh_key_file: "{{ vm_ssh_key_file }}"
          vm_ssh_user: "{{ vm_ssh_user }}"
      check_mode: true
      no_log: true

    # Run the equivalent of the 'terraform apply' command.
    # Use and specify variables originating from vars.yml (also be careful keep them out of any logs).
    # Save the task output to the terraform_result variable.
    - name: Create and execute Terraform plan
      cloud.terraform.terraform:
        project_path: "{{ tf_project_path }}"
        state: present
        variables: *tf_variables
      no_log: true
      register: terraform_result

    # Check that Terraform output value holding the IP address is defined.
    - name: Assert that Terraform output value is defined
      ansible.builtin.assert:
        that:
          - terraform_result.outputs.vm_ip_address.value is defined

  post_tasks:
    # Create a temporary inventory with the 'vm' hostname and add it to the 'vms' group.
    # Also set the necessary parameters for host, user, and private SSH key file.
    # Keep the ansible_ssh_common_args as it is.
    - name: Create in-memory inventory for the VM
      ansible.builtin.add_host:
        name: vm
        groups: vms
        ansible_user: "{{ vm_ssh_user }}"
        ansible_host: "{{ terraform_result.outputs.vm_ip_address.value }}"
        ansible_ssh_private_key_file: "{{ vm_ssh_key_file }}"
        ansible_ssh_common_args: >
          -o IdentitiesOnly=yes
          -o BatchMode=yes
          -o UserKnownHostsFile=/dev/null
          -o StrictHostKeyChecking=no

- name: Configure an OpenStack VM using Ansible
  hosts: vms
  gather_facts: false
  vars_files:
    - vars.yml
  pre_tasks:
    # Wait for SSH to wake up.
    # Start polling after 10s, sleep for 5s between checks, and wait for the maximum of 120s.
    - name: Waits until remote VM is usable
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 120
        sleep: 5

  tasks:
    - name: A configuration block for the web server
      block:
        # Run the equivalent of the 'sudo apt update && sudo apt install apache2' command.
        - name: Install Apache
          become: true
          ansible.builtin.apt:
            package: apache2
            update_cache: true
            state: present

        # Run the equivalent of the 'sudo service apache2 start' command.
        - name: Start Apache service
          become: true
          ansible.builtin.service:
            name: apache2
            state: started

        # Copy web page files to a remote location (i.e., /var/www/html/index.html).
        # This task should also notify the 'Restart Apache service' handler.
        - name: Copy website files
          become: true
          ansible.builtin.copy:
            src: html/index.html
            dest: /var/www/html/index.html
            owner: apache
            group: apache
            mode: 0755
          notify: 'Restart Apache service'

  handlers:
    # Run the equivalent of the 'sudo service apache2 restart' command.
    - name: Restart Apache service
      become: true
      ansible.builtin.service:
        name: apache2
        state: restarted
...
